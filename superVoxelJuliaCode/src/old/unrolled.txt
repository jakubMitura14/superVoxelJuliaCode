#we get the diffrence between the sv center and the triangle center
      shared_arr[threadIdx().x,1]= ((tetr_dat[index,5,1]-tetr_dat[index,1,1])/(3+1))
      shared_arr[threadIdx().x,2]=((tetr_dat[index,5,2]-tetr_dat[index,1,2])/(3+1))
      shared_arr[threadIdx().x,3]=((tetr_dat[index,5,3]-tetr_dat[index,1,3])/(3+1))



      ##calculate weight of the point
      #first distance from next and previous point on the line between sv center and triangle center
      shared_arr[threadIdx().x,4]=sqrt((shared_arr[threadIdx().x,1])^2 +(shared_arr[threadIdx().x,2])^2+(shared_arr[threadIdx().x,3])^2)*2 #distance between main sample points (two times for distance to previous and next)
      #now we get the distance to the lines that get from sv center to the triangle corners - for simplicity
      # we can assume that sv center location is 0.0,0.0,0.0 as we need only diffrences 
      #now we get the location of sample point

      shared_arr[threadIdx().x,1]= tetr_dat[index,1,1]+(shared_arr[threadIdx().x,1]*1)
      shared_arr[threadIdx().x,2]= tetr_dat[index,1,2]+(shared_arr[threadIdx().x,2]*1)
      shared_arr[threadIdx().x,3]= tetr_dat[index,1,3]+(shared_arr[threadIdx().x,3]*1)


shared_arr[threadIdx().x,4]+=sqrt(((((tetr_dat[index,1,2]-tetr_dat[index,1+1,2])*(tetr_dat[index,1,3]-shared_arr[threadIdx().x,3]) - (tetr_dat[index,1,3]-tetr_dat[index,1+1,3])*(tetr_dat[index,1,2]-shared_arr[threadIdx().x,2]))^2)+
  (((tetr_dat[index,1,3]-tetr_dat[index,1+1,3])*(tetr_dat[index,1,1]-shared_arr[threadIdx().x,1]) - (tetr_dat[index,1,1]-tetr_dat[index,1+1,1])*(tetr_dat[index,1,3]-shared_arr[threadIdx().x,3]))^2)+
  ((tetr_dat[index,1,1]-tetr_dat[index,1+1,1])*(tetr_dat[index,1,2]-shared_arr[threadIdx().x,2]) - (tetr_dat[index,1,2]-tetr_dat[index,1+1,2])*(tetr_dat[index,1,1]-shared_arr[threadIdx().x,1]))^2)) / sqrt((tetr_dat[index,1+1,2]-tetr_dat[index,1,2])^2+(tetr_dat[index,1+1,3]-tetr_dat[index,1,3])^2+(tetr_dat[index,1+1,1]-tetr_dat[index,1,1])^2)
  out_sampled_points[index,1,1]=(((
    source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))) +
    source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))
    )
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (1 - (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))
     +
     ((source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))

(shared_arr,source_arr)
  #saving sample points coordinates mainly for debugging and visualizations
  out_sampled_points[index,1,3]=shared_arr[threadIdx().x,1]
  out_sampled_points[index,1,4]=shared_arr[threadIdx().x,2]
  out_sampled_points[index,1,5]=shared_arr[threadIdx().x,3]


shared_arr[threadIdx().x,4]+=sqrt(((((tetr_dat[index,1,2]-tetr_dat[index,2+1,2])*(tetr_dat[index,1,3]-shared_arr[threadIdx().x,3]) - (tetr_dat[index,1,3]-tetr_dat[index,2+1,3])*(tetr_dat[index,1,2]-shared_arr[threadIdx().x,2]))^2)+
  (((tetr_dat[index,1,3]-tetr_dat[index,2+1,3])*(tetr_dat[index,1,1]-shared_arr[threadIdx().x,1]) - (tetr_dat[index,1,1]-tetr_dat[index,2+1,1])*(tetr_dat[index,1,3]-shared_arr[threadIdx().x,3]))^2)+
  ((tetr_dat[index,1,1]-tetr_dat[index,2+1,1])*(tetr_dat[index,1,2]-shared_arr[threadIdx().x,2]) - (tetr_dat[index,1,2]-tetr_dat[index,2+1,2])*(tetr_dat[index,1,1]-shared_arr[threadIdx().x,1]))^2)) / sqrt((tetr_dat[index,2+1,2]-tetr_dat[index,1,2])^2+(tetr_dat[index,2+1,3]-tetr_dat[index,1,3])^2+(tetr_dat[index,2+1,1]-tetr_dat[index,1,1])^2)
  out_sampled_points[index,1,1]=(((
    source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))) +
    source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))
    )
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (1 - (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))
     +
     ((source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))

(shared_arr,source_arr)
  #saving sample points coordinates mainly for debugging and visualizations
  out_sampled_points[index,1,3]=shared_arr[threadIdx().x,1]
  out_sampled_points[index,1,4]=shared_arr[threadIdx().x,2]
  out_sampled_points[index,1,5]=shared_arr[threadIdx().x,3]


shared_arr[threadIdx().x,4]+=sqrt(((((tetr_dat[index,1,2]-tetr_dat[index,3+1,2])*(tetr_dat[index,1,3]-shared_arr[threadIdx().x,3]) - (tetr_dat[index,1,3]-tetr_dat[index,3+1,3])*(tetr_dat[index,1,2]-shared_arr[threadIdx().x,2]))^2)+
  (((tetr_dat[index,1,3]-tetr_dat[index,3+1,3])*(tetr_dat[index,1,1]-shared_arr[threadIdx().x,1]) - (tetr_dat[index,1,1]-tetr_dat[index,3+1,1])*(tetr_dat[index,1,3]-shared_arr[threadIdx().x,3]))^2)+
  ((tetr_dat[index,1,1]-tetr_dat[index,3+1,1])*(tetr_dat[index,1,2]-shared_arr[threadIdx().x,2]) - (tetr_dat[index,1,2]-tetr_dat[index,3+1,2])*(tetr_dat[index,1,1]-shared_arr[threadIdx().x,1]))^2)) / sqrt((tetr_dat[index,3+1,2]-tetr_dat[index,1,2])^2+(tetr_dat[index,3+1,3]-tetr_dat[index,1,3])^2+(tetr_dat[index,3+1,1]-tetr_dat[index,1,1])^2)
  out_sampled_points[index,1,1]=(((
    source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))) +
    source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))
    )
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (1 - (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))
     +
     ((source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))

(shared_arr,source_arr)
  #saving sample points coordinates mainly for debugging and visualizations
  out_sampled_points[index,1,3]=shared_arr[threadIdx().x,1]
  out_sampled_points[index,1,4]=shared_arr[threadIdx().x,2]
  out_sampled_points[index,1,5]=shared_arr[threadIdx().x,3]

 out_sampled_points[index,1,2]= (((shared_arr[threadIdx().x,4])/5)^3)
out_sampled_points[index,1,1]=(((
    source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))) +
    source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))
    )
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (1 - (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))
     +
     ((source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))

(shared_arr,source_arr)
#saving sample points coordinates mainly for debugging and visualizations
out_sampled_points[index,1,3]=shared_arr[threadIdx().x,1]
out_sampled_points[index,1,4]=shared_arr[threadIdx().x,2]
out_sampled_points[index,1,5]=shared_arr[threadIdx().x,3]


#we get the diffrence between the sv center and the triangle center
      shared_arr[threadIdx().x,1]= ((tetr_dat[index,5,1]-tetr_dat[index,1,1])/(3+1))
      shared_arr[threadIdx().x,2]=((tetr_dat[index,5,2]-tetr_dat[index,1,2])/(3+1))
      shared_arr[threadIdx().x,3]=((tetr_dat[index,5,3]-tetr_dat[index,1,3])/(3+1))



      ##calculate weight of the point
      #first distance from next and previous point on the line between sv center and triangle center
      shared_arr[threadIdx().x,4]=sqrt((shared_arr[threadIdx().x,1])^2 +(shared_arr[threadIdx().x,2])^2+(shared_arr[threadIdx().x,3])^2)*2 #distance between main sample points (two times for distance to previous and next)
      #now we get the distance to the lines that get from sv center to the triangle corners - for simplicity
      # we can assume that sv center location is 0.0,0.0,0.0 as we need only diffrences 
      #now we get the location of sample point

      shared_arr[threadIdx().x,1]= tetr_dat[index,1,1]+(shared_arr[threadIdx().x,1]*2)
      shared_arr[threadIdx().x,2]= tetr_dat[index,1,2]+(shared_arr[threadIdx().x,2]*2)
      shared_arr[threadIdx().x,3]= tetr_dat[index,1,3]+(shared_arr[threadIdx().x,3]*2)


shared_arr[threadIdx().x,4]+=sqrt(((((tetr_dat[index,1,2]-tetr_dat[index,1+1,2])*(tetr_dat[index,1,3]-shared_arr[threadIdx().x,3]) - (tetr_dat[index,1,3]-tetr_dat[index,1+1,3])*(tetr_dat[index,1,2]-shared_arr[threadIdx().x,2]))^2)+
  (((tetr_dat[index,1,3]-tetr_dat[index,1+1,3])*(tetr_dat[index,1,1]-shared_arr[threadIdx().x,1]) - (tetr_dat[index,1,1]-tetr_dat[index,1+1,1])*(tetr_dat[index,1,3]-shared_arr[threadIdx().x,3]))^2)+
  ((tetr_dat[index,1,1]-tetr_dat[index,1+1,1])*(tetr_dat[index,1,2]-shared_arr[threadIdx().x,2]) - (tetr_dat[index,1,2]-tetr_dat[index,1+1,2])*(tetr_dat[index,1,1]-shared_arr[threadIdx().x,1]))^2)) / sqrt((tetr_dat[index,1+1,2]-tetr_dat[index,1,2])^2+(tetr_dat[index,1+1,3]-tetr_dat[index,1,3])^2+(tetr_dat[index,1+1,1]-tetr_dat[index,1,1])^2)
  out_sampled_points[index,2,1]=(((
    source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))) +
    source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))
    )
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (1 - (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))
     +
     ((source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))

(shared_arr,source_arr)
  #saving sample points coordinates mainly for debugging and visualizations
  out_sampled_points[index,2,3]=shared_arr[threadIdx().x,1]
  out_sampled_points[index,2,4]=shared_arr[threadIdx().x,2]
  out_sampled_points[index,2,5]=shared_arr[threadIdx().x,3]


shared_arr[threadIdx().x,4]+=sqrt(((((tetr_dat[index,1,2]-tetr_dat[index,2+1,2])*(tetr_dat[index,1,3]-shared_arr[threadIdx().x,3]) - (tetr_dat[index,1,3]-tetr_dat[index,2+1,3])*(tetr_dat[index,1,2]-shared_arr[threadIdx().x,2]))^2)+
  (((tetr_dat[index,1,3]-tetr_dat[index,2+1,3])*(tetr_dat[index,1,1]-shared_arr[threadIdx().x,1]) - (tetr_dat[index,1,1]-tetr_dat[index,2+1,1])*(tetr_dat[index,1,3]-shared_arr[threadIdx().x,3]))^2)+
  ((tetr_dat[index,1,1]-tetr_dat[index,2+1,1])*(tetr_dat[index,1,2]-shared_arr[threadIdx().x,2]) - (tetr_dat[index,1,2]-tetr_dat[index,2+1,2])*(tetr_dat[index,1,1]-shared_arr[threadIdx().x,1]))^2)) / sqrt((tetr_dat[index,2+1,2]-tetr_dat[index,1,2])^2+(tetr_dat[index,2+1,3]-tetr_dat[index,1,3])^2+(tetr_dat[index,2+1,1]-tetr_dat[index,1,1])^2)
  out_sampled_points[index,2,1]=(((
    source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))) +
    source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))
    )
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (1 - (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))
     +
     ((source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))

(shared_arr,source_arr)
  #saving sample points coordinates mainly for debugging and visualizations
  out_sampled_points[index,2,3]=shared_arr[threadIdx().x,1]
  out_sampled_points[index,2,4]=shared_arr[threadIdx().x,2]
  out_sampled_points[index,2,5]=shared_arr[threadIdx().x,3]


shared_arr[threadIdx().x,4]+=sqrt(((((tetr_dat[index,1,2]-tetr_dat[index,3+1,2])*(tetr_dat[index,1,3]-shared_arr[threadIdx().x,3]) - (tetr_dat[index,1,3]-tetr_dat[index,3+1,3])*(tetr_dat[index,1,2]-shared_arr[threadIdx().x,2]))^2)+
  (((tetr_dat[index,1,3]-tetr_dat[index,3+1,3])*(tetr_dat[index,1,1]-shared_arr[threadIdx().x,1]) - (tetr_dat[index,1,1]-tetr_dat[index,3+1,1])*(tetr_dat[index,1,3]-shared_arr[threadIdx().x,3]))^2)+
  ((tetr_dat[index,1,1]-tetr_dat[index,3+1,1])*(tetr_dat[index,1,2]-shared_arr[threadIdx().x,2]) - (tetr_dat[index,1,2]-tetr_dat[index,3+1,2])*(tetr_dat[index,1,1]-shared_arr[threadIdx().x,1]))^2)) / sqrt((tetr_dat[index,3+1,2]-tetr_dat[index,1,2])^2+(tetr_dat[index,3+1,3]-tetr_dat[index,1,3])^2+(tetr_dat[index,3+1,1]-tetr_dat[index,1,1])^2)
  out_sampled_points[index,2,1]=(((
    source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))) +
    source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))
    )
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (1 - (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))
     +
     ((source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))

(shared_arr,source_arr)
  #saving sample points coordinates mainly for debugging and visualizations
  out_sampled_points[index,2,3]=shared_arr[threadIdx().x,1]
  out_sampled_points[index,2,4]=shared_arr[threadIdx().x,2]
  out_sampled_points[index,2,5]=shared_arr[threadIdx().x,3]

 out_sampled_points[index,2,2]= (((shared_arr[threadIdx().x,4])/5)^3)
out_sampled_points[index,2,1]=(((
    source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))) +
    source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))
    )
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (1 - (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))
     +
     ((source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))

(shared_arr,source_arr)
#saving sample points coordinates mainly for debugging and visualizations
out_sampled_points[index,2,3]=shared_arr[threadIdx().x,1]
out_sampled_points[index,2,4]=shared_arr[threadIdx().x,2]
out_sampled_points[index,2,5]=shared_arr[threadIdx().x,3]


#we get the diffrence between the sv center and the triangle center
      shared_arr[threadIdx().x,1]= ((tetr_dat[index,5,1]-tetr_dat[index,1,1])/(3+1))
      shared_arr[threadIdx().x,2]=((tetr_dat[index,5,2]-tetr_dat[index,1,2])/(3+1))
      shared_arr[threadIdx().x,3]=((tetr_dat[index,5,3]-tetr_dat[index,1,3])/(3+1))



      ##calculate weight of the point
      #first distance from next and previous point on the line between sv center and triangle center
      shared_arr[threadIdx().x,4]=sqrt((shared_arr[threadIdx().x,1])^2 +(shared_arr[threadIdx().x,2])^2+(shared_arr[threadIdx().x,3])^2)*2 #distance between main sample points (two times for distance to previous and next)
      #now we get the distance to the lines that get from sv center to the triangle corners - for simplicity
      # we can assume that sv center location is 0.0,0.0,0.0 as we need only diffrences 
      #now we get the location of sample point

      shared_arr[threadIdx().x,1]= tetr_dat[index,1,1]+(shared_arr[threadIdx().x,1]*3)
      shared_arr[threadIdx().x,2]= tetr_dat[index,1,2]+(shared_arr[threadIdx().x,2]*3)
      shared_arr[threadIdx().x,3]= tetr_dat[index,1,3]+(shared_arr[threadIdx().x,3]*3)


shared_arr[threadIdx().x,4]+=sqrt( ((tetr_dat[index,1+1,1]-shared_arr[threadIdx().x,1])
      *(1/(num_additional_samp_points+1)))^2
      +((tetr_dat[index,1+1,2]-shared_arr[threadIdx().x,2])
      *(1/(num_additional_samp_points+1)))^2
      +((tetr_dat[index,1+1,3]-shared_arr[threadIdx().x,3])
      *(1/(num_additional_samp_points+1)))^2)

       
shared_arr[threadIdx().x,4]+=sqrt( ((tetr_dat[index,2+1,1]-shared_arr[threadIdx().x,1])
      *(1/(num_additional_samp_points+1)))^2
      +((tetr_dat[index,2+1,2]-shared_arr[threadIdx().x,2])
      *(1/(num_additional_samp_points+1)))^2
      +((tetr_dat[index,2+1,3]-shared_arr[threadIdx().x,3])
      *(1/(num_additional_samp_points+1)))^2)

       
shared_arr[threadIdx().x,4]+=sqrt( ((tetr_dat[index,3+1,1]-shared_arr[threadIdx().x,1])
      *(1/(num_additional_samp_points+1)))^2
      +((tetr_dat[index,3+1,2]-shared_arr[threadIdx().x,2])
      *(1/(num_additional_samp_points+1)))^2
      +((tetr_dat[index,3+1,3]-shared_arr[threadIdx().x,3])
      *(1/(num_additional_samp_points+1)))^2)

        out_sampled_points[index,3,2]= (((shared_arr[threadIdx().x,4])/5)^3)
out_sampled_points[index,3,1]=(((
    source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))) +
    source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))
    )
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (1 - (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))
     +
     ((source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))

(shared_arr,source_arr)
#saving sample points coordinates mainly for debugging and visualizations
out_sampled_points[index,3,3]=shared_arr[threadIdx().x,1]
out_sampled_points[index,3,4]=shared_arr[threadIdx().x,2]
out_sampled_points[index,3,5]=shared_arr[threadIdx().x,3]


 
shared_arr[threadIdx().x,1]=((tetr_dat[index,1+1,1]-out_sampled_points[index,num_base_samp_points,3])/(2+1))
shared_arr[threadIdx().x,2]=((tetr_dat[index,1+1,2]-out_sampled_points[index,num_base_samp_points,4])/(2+1))
shared_arr[threadIdx().x,3]=((tetr_dat[index,1+1,3]-out_sampled_points[index,num_base_samp_points,5])/(2+1))

#### calculate weight of the point 
#first we get distance to the previous and next point on the line between the last main sample point and the triangle corner
shared_arr[threadIdx().x,4]=sqrt( shared_arr[threadIdx().x,1]^2+shared_arr[threadIdx().x,2]^2+shared_arr[threadIdx().x,3]^2)*2
#now we get the location of sample point
shared_arr[threadIdx().x,1]= out_sampled_points[index,num_base_samp_points,3]+(shared_arr[threadIdx().x,1]*(1))
shared_arr[threadIdx().x,2]= out_sampled_points[index,num_base_samp_points,4]+(shared_arr[threadIdx().x,2]*(1))
shared_arr[threadIdx().x,3]= out_sampled_points[index,num_base_samp_points,5]+(shared_arr[threadIdx().x,3]*(1))

 

shared_arr[threadIdx().x,4]+=sqrt(((((tetr_dat[index,1+1,2]-tetr_dat[index,1,2])*(tetr_dat[index,1+1,3]-shared_arr[threadIdx().x,3]) - (tetr_dat[index,1+1,3]-tetr_dat[index,1,3])*(tetr_dat[index,1+1,2]-shared_arr[threadIdx().x,2]))^2)+
(((tetr_dat[index,1+1,3]-tetr_dat[index,1,3])*(tetr_dat[index,1+1,1]-shared_arr[threadIdx().x,1]) - (tetr_dat[index,1+1,1]-tetr_dat[index,1,1])*(tetr_dat[index,1+1,3]-shared_arr[threadIdx().x,3]))^2)+
((tetr_dat[index,1+1,1]-tetr_dat[index,1,1])*(tetr_dat[index,1+1,2]-shared_arr[threadIdx().x,2]) - (tetr_dat[index,1+1,2]-tetr_dat[index,1,2])*(tetr_dat[index,1+1,1]-shared_arr[threadIdx().x,1]))^2)) / sqrt((tetr_dat[index,1,2]-tetr_dat[index,1+1,2])^2+(tetr_dat[index,1,3]-tetr_dat[index,1+1,3])^2+(tetr_dat[index,1,1]-tetr_dat[index,1+1,1])^2)


 

shared_arr[threadIdx().x,4]+=sqrt(((((tetr_dat[index,1+1,2]-tetr_dat[index,3,2])*(tetr_dat[index,1+1,3]-shared_arr[threadIdx().x,3]) - (tetr_dat[index,1+1,3]-tetr_dat[index,3,3])*(tetr_dat[index,1+1,2]-shared_arr[threadIdx().x,2]))^2)+
(((tetr_dat[index,1+1,3]-tetr_dat[index,3,3])*(tetr_dat[index,1+1,1]-shared_arr[threadIdx().x,1]) - (tetr_dat[index,1+1,1]-tetr_dat[index,3,1])*(tetr_dat[index,1+1,3]-shared_arr[threadIdx().x,3]))^2)+
((tetr_dat[index,1+1,1]-tetr_dat[index,3,1])*(tetr_dat[index,1+1,2]-shared_arr[threadIdx().x,2]) - (tetr_dat[index,1+1,2]-tetr_dat[index,3,2])*(tetr_dat[index,1+1,1]-shared_arr[threadIdx().x,1]))^2)) / sqrt((tetr_dat[index,3,2]-tetr_dat[index,1+1,2])^2+(tetr_dat[index,3,3]-tetr_dat[index,1+1,3])^2+(tetr_dat[index,3,1]-tetr_dat[index,1+1,1])^2)


 

shared_arr[threadIdx().x,4]+=sqrt(((((tetr_dat[index,1+1,2]-tetr_dat[index,4,2])*(tetr_dat[index,1+1,3]-shared_arr[threadIdx().x,3]) - (tetr_dat[index,1+1,3]-tetr_dat[index,4,3])*(tetr_dat[index,1+1,2]-shared_arr[threadIdx().x,2]))^2)+
(((tetr_dat[index,1+1,3]-tetr_dat[index,4,3])*(tetr_dat[index,1+1,1]-shared_arr[threadIdx().x,1]) - (tetr_dat[index,1+1,1]-tetr_dat[index,4,1])*(tetr_dat[index,1+1,3]-shared_arr[threadIdx().x,3]))^2)+
((tetr_dat[index,1+1,1]-tetr_dat[index,4,1])*(tetr_dat[index,1+1,2]-shared_arr[threadIdx().x,2]) - (tetr_dat[index,1+1,2]-tetr_dat[index,4,2])*(tetr_dat[index,1+1,1]-shared_arr[threadIdx().x,1]))^2)) / sqrt((tetr_dat[index,4,2]-tetr_dat[index,1+1,2])^2+(tetr_dat[index,4,3]-tetr_dat[index,1+1,3])^2+(tetr_dat[index,4,1]-tetr_dat[index,1+1,1])^2)


 
out_sampled_points[index,(num_base_samp_points+1)+(1-1)*3,2]=(((shared_arr[threadIdx().x,4])/5)^3)      
#performing interpolation result is in var2 and it get data from shared_arr
#saving the result of interpolated value to the out_sampled_points
out_sampled_points[index,(num_base_samp_points+1)+(1-1)*3,1]=(((
    source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))) +
    source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))
    )
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (1 - (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))
     +
     ((source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))

(shared_arr,source_arr)
# #saving sample points coordinates
out_sampled_points[index,(num_base_samp_points+1)+(1-1)*3,3]=shared_arr[threadIdx().x,1]
out_sampled_points[index,(num_base_samp_points+1)+(1-1)*3,4]=shared_arr[threadIdx().x,2]
out_sampled_points[index,(num_base_samp_points+1)+(1-1)*3,5]=shared_arr[threadIdx().x,3]

 
shared_arr[threadIdx().x,1]=((tetr_dat[index,2+1,1]-out_sampled_points[index,num_base_samp_points,3])/(2+1))
shared_arr[threadIdx().x,2]=((tetr_dat[index,2+1,2]-out_sampled_points[index,num_base_samp_points,4])/(2+1))
shared_arr[threadIdx().x,3]=((tetr_dat[index,2+1,3]-out_sampled_points[index,num_base_samp_points,5])/(2+1))

#### calculate weight of the point 
#first we get distance to the previous and next point on the line between the last main sample point and the triangle corner
shared_arr[threadIdx().x,4]=sqrt( shared_arr[threadIdx().x,1]^2+shared_arr[threadIdx().x,2]^2+shared_arr[threadIdx().x,3]^2)*2
#now we get the location of sample point
shared_arr[threadIdx().x,1]= out_sampled_points[index,num_base_samp_points,3]+(shared_arr[threadIdx().x,1]*(1))
shared_arr[threadIdx().x,2]= out_sampled_points[index,num_base_samp_points,4]+(shared_arr[threadIdx().x,2]*(1))
shared_arr[threadIdx().x,3]= out_sampled_points[index,num_base_samp_points,5]+(shared_arr[threadIdx().x,3]*(1))

 

shared_arr[threadIdx().x,4]+=sqrt(((((tetr_dat[index,2+1,2]-tetr_dat[index,1,2])*(tetr_dat[index,2+1,3]-shared_arr[threadIdx().x,3]) - (tetr_dat[index,2+1,3]-tetr_dat[index,1,3])*(tetr_dat[index,2+1,2]-shared_arr[threadIdx().x,2]))^2)+
(((tetr_dat[index,2+1,3]-tetr_dat[index,1,3])*(tetr_dat[index,2+1,1]-shared_arr[threadIdx().x,1]) - (tetr_dat[index,2+1,1]-tetr_dat[index,1,1])*(tetr_dat[index,2+1,3]-shared_arr[threadIdx().x,3]))^2)+
((tetr_dat[index,2+1,1]-tetr_dat[index,1,1])*(tetr_dat[index,2+1,2]-shared_arr[threadIdx().x,2]) - (tetr_dat[index,2+1,2]-tetr_dat[index,1,2])*(tetr_dat[index,2+1,1]-shared_arr[threadIdx().x,1]))^2)) / sqrt((tetr_dat[index,1,2]-tetr_dat[index,2+1,2])^2+(tetr_dat[index,1,3]-tetr_dat[index,2+1,3])^2+(tetr_dat[index,1,1]-tetr_dat[index,2+1,1])^2)


 

shared_arr[threadIdx().x,4]+=sqrt(((((tetr_dat[index,2+1,2]-tetr_dat[index,2,2])*(tetr_dat[index,2+1,3]-shared_arr[threadIdx().x,3]) - (tetr_dat[index,2+1,3]-tetr_dat[index,2,3])*(tetr_dat[index,2+1,2]-shared_arr[threadIdx().x,2]))^2)+
(((tetr_dat[index,2+1,3]-tetr_dat[index,2,3])*(tetr_dat[index,2+1,1]-shared_arr[threadIdx().x,1]) - (tetr_dat[index,2+1,1]-tetr_dat[index,2,1])*(tetr_dat[index,2+1,3]-shared_arr[threadIdx().x,3]))^2)+
((tetr_dat[index,2+1,1]-tetr_dat[index,2,1])*(tetr_dat[index,2+1,2]-shared_arr[threadIdx().x,2]) - (tetr_dat[index,2+1,2]-tetr_dat[index,2,2])*(tetr_dat[index,2+1,1]-shared_arr[threadIdx().x,1]))^2)) / sqrt((tetr_dat[index,2,2]-tetr_dat[index,2+1,2])^2+(tetr_dat[index,2,3]-tetr_dat[index,2+1,3])^2+(tetr_dat[index,2,1]-tetr_dat[index,2+1,1])^2)


 

shared_arr[threadIdx().x,4]+=sqrt(((((tetr_dat[index,2+1,2]-tetr_dat[index,4,2])*(tetr_dat[index,2+1,3]-shared_arr[threadIdx().x,3]) - (tetr_dat[index,2+1,3]-tetr_dat[index,4,3])*(tetr_dat[index,2+1,2]-shared_arr[threadIdx().x,2]))^2)+
(((tetr_dat[index,2+1,3]-tetr_dat[index,4,3])*(tetr_dat[index,2+1,1]-shared_arr[threadIdx().x,1]) - (tetr_dat[index,2+1,1]-tetr_dat[index,4,1])*(tetr_dat[index,2+1,3]-shared_arr[threadIdx().x,3]))^2)+
((tetr_dat[index,2+1,1]-tetr_dat[index,4,1])*(tetr_dat[index,2+1,2]-shared_arr[threadIdx().x,2]) - (tetr_dat[index,2+1,2]-tetr_dat[index,4,2])*(tetr_dat[index,2+1,1]-shared_arr[threadIdx().x,1]))^2)) / sqrt((tetr_dat[index,4,2]-tetr_dat[index,2+1,2])^2+(tetr_dat[index,4,3]-tetr_dat[index,2+1,3])^2+(tetr_dat[index,4,1]-tetr_dat[index,2+1,1])^2)


 
out_sampled_points[index,(num_base_samp_points+2)+(1-1)*3,2]=(((shared_arr[threadIdx().x,4])/5)^3)      
#performing interpolation result is in var2 and it get data from shared_arr
#saving the result of interpolated value to the out_sampled_points
out_sampled_points[index,(num_base_samp_points+2)+(1-1)*3,1]=(((
    source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))) +
    source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))
    )
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (1 - (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))
     +
     ((source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))

(shared_arr,source_arr)
# #saving sample points coordinates
out_sampled_points[index,(num_base_samp_points+2)+(1-1)*3,3]=shared_arr[threadIdx().x,1]
out_sampled_points[index,(num_base_samp_points+2)+(1-1)*3,4]=shared_arr[threadIdx().x,2]
out_sampled_points[index,(num_base_samp_points+2)+(1-1)*3,5]=shared_arr[threadIdx().x,3]

 
shared_arr[threadIdx().x,1]=((tetr_dat[index,3+1,1]-out_sampled_points[index,num_base_samp_points,3])/(2+1))
shared_arr[threadIdx().x,2]=((tetr_dat[index,3+1,2]-out_sampled_points[index,num_base_samp_points,4])/(2+1))
shared_arr[threadIdx().x,3]=((tetr_dat[index,3+1,3]-out_sampled_points[index,num_base_samp_points,5])/(2+1))

#### calculate weight of the point 
#first we get distance to the previous and next point on the line between the last main sample point and the triangle corner
shared_arr[threadIdx().x,4]=sqrt( shared_arr[threadIdx().x,1]^2+shared_arr[threadIdx().x,2]^2+shared_arr[threadIdx().x,3]^2)*2
#now we get the location of sample point
shared_arr[threadIdx().x,1]= out_sampled_points[index,num_base_samp_points,3]+(shared_arr[threadIdx().x,1]*(1))
shared_arr[threadIdx().x,2]= out_sampled_points[index,num_base_samp_points,4]+(shared_arr[threadIdx().x,2]*(1))
shared_arr[threadIdx().x,3]= out_sampled_points[index,num_base_samp_points,5]+(shared_arr[threadIdx().x,3]*(1))

 

shared_arr[threadIdx().x,4]+=sqrt(((((tetr_dat[index,3+1,2]-tetr_dat[index,1,2])*(tetr_dat[index,3+1,3]-shared_arr[threadIdx().x,3]) - (tetr_dat[index,3+1,3]-tetr_dat[index,1,3])*(tetr_dat[index,3+1,2]-shared_arr[threadIdx().x,2]))^2)+
(((tetr_dat[index,3+1,3]-tetr_dat[index,1,3])*(tetr_dat[index,3+1,1]-shared_arr[threadIdx().x,1]) - (tetr_dat[index,3+1,1]-tetr_dat[index,1,1])*(tetr_dat[index,3+1,3]-shared_arr[threadIdx().x,3]))^2)+
((tetr_dat[index,3+1,1]-tetr_dat[index,1,1])*(tetr_dat[index,3+1,2]-shared_arr[threadIdx().x,2]) - (tetr_dat[index,3+1,2]-tetr_dat[index,1,2])*(tetr_dat[index,3+1,1]-shared_arr[threadIdx().x,1]))^2)) / sqrt((tetr_dat[index,1,2]-tetr_dat[index,3+1,2])^2+(tetr_dat[index,1,3]-tetr_dat[index,3+1,3])^2+(tetr_dat[index,1,1]-tetr_dat[index,3+1,1])^2)


 

shared_arr[threadIdx().x,4]+=sqrt(((((tetr_dat[index,3+1,2]-tetr_dat[index,2,2])*(tetr_dat[index,3+1,3]-shared_arr[threadIdx().x,3]) - (tetr_dat[index,3+1,3]-tetr_dat[index,2,3])*(tetr_dat[index,3+1,2]-shared_arr[threadIdx().x,2]))^2)+
(((tetr_dat[index,3+1,3]-tetr_dat[index,2,3])*(tetr_dat[index,3+1,1]-shared_arr[threadIdx().x,1]) - (tetr_dat[index,3+1,1]-tetr_dat[index,2,1])*(tetr_dat[index,3+1,3]-shared_arr[threadIdx().x,3]))^2)+
((tetr_dat[index,3+1,1]-tetr_dat[index,2,1])*(tetr_dat[index,3+1,2]-shared_arr[threadIdx().x,2]) - (tetr_dat[index,3+1,2]-tetr_dat[index,2,2])*(tetr_dat[index,3+1,1]-shared_arr[threadIdx().x,1]))^2)) / sqrt((tetr_dat[index,2,2]-tetr_dat[index,3+1,2])^2+(tetr_dat[index,2,3]-tetr_dat[index,3+1,3])^2+(tetr_dat[index,2,1]-tetr_dat[index,3+1,1])^2)


 

shared_arr[threadIdx().x,4]+=sqrt(((((tetr_dat[index,3+1,2]-tetr_dat[index,3,2])*(tetr_dat[index,3+1,3]-shared_arr[threadIdx().x,3]) - (tetr_dat[index,3+1,3]-tetr_dat[index,3,3])*(tetr_dat[index,3+1,2]-shared_arr[threadIdx().x,2]))^2)+
(((tetr_dat[index,3+1,3]-tetr_dat[index,3,3])*(tetr_dat[index,3+1,1]-shared_arr[threadIdx().x,1]) - (tetr_dat[index,3+1,1]-tetr_dat[index,3,1])*(tetr_dat[index,3+1,3]-shared_arr[threadIdx().x,3]))^2)+
((tetr_dat[index,3+1,1]-tetr_dat[index,3,1])*(tetr_dat[index,3+1,2]-shared_arr[threadIdx().x,2]) - (tetr_dat[index,3+1,2]-tetr_dat[index,3,2])*(tetr_dat[index,3+1,1]-shared_arr[threadIdx().x,1]))^2)) / sqrt((tetr_dat[index,3,2]-tetr_dat[index,3+1,2])^2+(tetr_dat[index,3,3]-tetr_dat[index,3+1,3])^2+(tetr_dat[index,3,1]-tetr_dat[index,3+1,1])^2)


 
out_sampled_points[index,(num_base_samp_points+3)+(1-1)*3,2]=(((shared_arr[threadIdx().x,4])/5)^3)      
#performing interpolation result is in var2 and it get data from shared_arr
#saving the result of interpolated value to the out_sampled_points
out_sampled_points[index,(num_base_samp_points+3)+(1-1)*3,1]=(((
    source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))) +
    source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))
    )
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (1 - (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))
     +
     ((source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))

(shared_arr,source_arr)
# #saving sample points coordinates
out_sampled_points[index,(num_base_samp_points+3)+(1-1)*3,3]=shared_arr[threadIdx().x,1]
out_sampled_points[index,(num_base_samp_points+3)+(1-1)*3,4]=shared_arr[threadIdx().x,2]
out_sampled_points[index,(num_base_samp_points+3)+(1-1)*3,5]=shared_arr[threadIdx().x,3]

 
shared_arr[threadIdx().x,1]=((tetr_dat[index,1+1,1]-out_sampled_points[index,num_base_samp_points,3])/(2+1))
shared_arr[threadIdx().x,2]=((tetr_dat[index,1+1,2]-out_sampled_points[index,num_base_samp_points,4])/(2+1))
shared_arr[threadIdx().x,3]=((tetr_dat[index,1+1,3]-out_sampled_points[index,num_base_samp_points,5])/(2+1))

#### calculate weight of the point 
#first we get distance to the previous and next point on the line between the last main sample point and the triangle corner
shared_arr[threadIdx().x,4]=sqrt( shared_arr[threadIdx().x,1]^2+shared_arr[threadIdx().x,2]^2+shared_arr[threadIdx().x,3]^2)*2
#now we get the location of sample point
shared_arr[threadIdx().x,1]= out_sampled_points[index,num_base_samp_points,3]+(shared_arr[threadIdx().x,1]*(2))
shared_arr[threadIdx().x,2]= out_sampled_points[index,num_base_samp_points,4]+(shared_arr[threadIdx().x,2]*(2))
shared_arr[threadIdx().x,3]= out_sampled_points[index,num_base_samp_points,5]+(shared_arr[threadIdx().x,3]*(2))

 

shared_arr[threadIdx().x,4]+=sqrt(((((tetr_dat[index,1+1,2]-tetr_dat[index,1,2])*(tetr_dat[index,1+1,3]-shared_arr[threadIdx().x,3]) - (tetr_dat[index,1+1,3]-tetr_dat[index,1,3])*(tetr_dat[index,1+1,2]-shared_arr[threadIdx().x,2]))^2)+
(((tetr_dat[index,1+1,3]-tetr_dat[index,1,3])*(tetr_dat[index,1+1,1]-shared_arr[threadIdx().x,1]) - (tetr_dat[index,1+1,1]-tetr_dat[index,1,1])*(tetr_dat[index,1+1,3]-shared_arr[threadIdx().x,3]))^2)+
((tetr_dat[index,1+1,1]-tetr_dat[index,1,1])*(tetr_dat[index,1+1,2]-shared_arr[threadIdx().x,2]) - (tetr_dat[index,1+1,2]-tetr_dat[index,1,2])*(tetr_dat[index,1+1,1]-shared_arr[threadIdx().x,1]))^2)) / sqrt((tetr_dat[index,1,2]-tetr_dat[index,1+1,2])^2+(tetr_dat[index,1,3]-tetr_dat[index,1+1,3])^2+(tetr_dat[index,1,1]-tetr_dat[index,1+1,1])^2)


 

shared_arr[threadIdx().x,4]+=sqrt(((((tetr_dat[index,1+1,2]-tetr_dat[index,3,2])*(tetr_dat[index,1+1,3]-shared_arr[threadIdx().x,3]) - (tetr_dat[index,1+1,3]-tetr_dat[index,3,3])*(tetr_dat[index,1+1,2]-shared_arr[threadIdx().x,2]))^2)+
(((tetr_dat[index,1+1,3]-tetr_dat[index,3,3])*(tetr_dat[index,1+1,1]-shared_arr[threadIdx().x,1]) - (tetr_dat[index,1+1,1]-tetr_dat[index,3,1])*(tetr_dat[index,1+1,3]-shared_arr[threadIdx().x,3]))^2)+
((tetr_dat[index,1+1,1]-tetr_dat[index,3,1])*(tetr_dat[index,1+1,2]-shared_arr[threadIdx().x,2]) - (tetr_dat[index,1+1,2]-tetr_dat[index,3,2])*(tetr_dat[index,1+1,1]-shared_arr[threadIdx().x,1]))^2)) / sqrt((tetr_dat[index,3,2]-tetr_dat[index,1+1,2])^2+(tetr_dat[index,3,3]-tetr_dat[index,1+1,3])^2+(tetr_dat[index,3,1]-tetr_dat[index,1+1,1])^2)


 

shared_arr[threadIdx().x,4]+=sqrt(((((tetr_dat[index,1+1,2]-tetr_dat[index,4,2])*(tetr_dat[index,1+1,3]-shared_arr[threadIdx().x,3]) - (tetr_dat[index,1+1,3]-tetr_dat[index,4,3])*(tetr_dat[index,1+1,2]-shared_arr[threadIdx().x,2]))^2)+
(((tetr_dat[index,1+1,3]-tetr_dat[index,4,3])*(tetr_dat[index,1+1,1]-shared_arr[threadIdx().x,1]) - (tetr_dat[index,1+1,1]-tetr_dat[index,4,1])*(tetr_dat[index,1+1,3]-shared_arr[threadIdx().x,3]))^2)+
((tetr_dat[index,1+1,1]-tetr_dat[index,4,1])*(tetr_dat[index,1+1,2]-shared_arr[threadIdx().x,2]) - (tetr_dat[index,1+1,2]-tetr_dat[index,4,2])*(tetr_dat[index,1+1,1]-shared_arr[threadIdx().x,1]))^2)) / sqrt((tetr_dat[index,4,2]-tetr_dat[index,1+1,2])^2+(tetr_dat[index,4,3]-tetr_dat[index,1+1,3])^2+(tetr_dat[index,4,1]-tetr_dat[index,1+1,1])^2)


 
out_sampled_points[index,(num_base_samp_points+1)+(2-1)*3,2]=(((shared_arr[threadIdx().x,4])/5)^3)      
#performing interpolation result is in var2 and it get data from shared_arr
#saving the result of interpolated value to the out_sampled_points
out_sampled_points[index,(num_base_samp_points+1)+(2-1)*3,1]=(((
    source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))) +
    source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))
    )
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (1 - (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))
     +
     ((source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))

(shared_arr,source_arr)
# #saving sample points coordinates
out_sampled_points[index,(num_base_samp_points+1)+(2-1)*3,3]=shared_arr[threadIdx().x,1]
out_sampled_points[index,(num_base_samp_points+1)+(2-1)*3,4]=shared_arr[threadIdx().x,2]
out_sampled_points[index,(num_base_samp_points+1)+(2-1)*3,5]=shared_arr[threadIdx().x,3]

 
shared_arr[threadIdx().x,1]=((tetr_dat[index,2+1,1]-out_sampled_points[index,num_base_samp_points,3])/(2+1))
shared_arr[threadIdx().x,2]=((tetr_dat[index,2+1,2]-out_sampled_points[index,num_base_samp_points,4])/(2+1))
shared_arr[threadIdx().x,3]=((tetr_dat[index,2+1,3]-out_sampled_points[index,num_base_samp_points,5])/(2+1))

#### calculate weight of the point 
#first we get distance to the previous and next point on the line between the last main sample point and the triangle corner
shared_arr[threadIdx().x,4]=sqrt( shared_arr[threadIdx().x,1]^2+shared_arr[threadIdx().x,2]^2+shared_arr[threadIdx().x,3]^2)*2
#now we get the location of sample point
shared_arr[threadIdx().x,1]= out_sampled_points[index,num_base_samp_points,3]+(shared_arr[threadIdx().x,1]*(2))
shared_arr[threadIdx().x,2]= out_sampled_points[index,num_base_samp_points,4]+(shared_arr[threadIdx().x,2]*(2))
shared_arr[threadIdx().x,3]= out_sampled_points[index,num_base_samp_points,5]+(shared_arr[threadIdx().x,3]*(2))

 

shared_arr[threadIdx().x,4]+=sqrt(((((tetr_dat[index,2+1,2]-tetr_dat[index,1,2])*(tetr_dat[index,2+1,3]-shared_arr[threadIdx().x,3]) - (tetr_dat[index,2+1,3]-tetr_dat[index,1,3])*(tetr_dat[index,2+1,2]-shared_arr[threadIdx().x,2]))^2)+
(((tetr_dat[index,2+1,3]-tetr_dat[index,1,3])*(tetr_dat[index,2+1,1]-shared_arr[threadIdx().x,1]) - (tetr_dat[index,2+1,1]-tetr_dat[index,1,1])*(tetr_dat[index,2+1,3]-shared_arr[threadIdx().x,3]))^2)+
((tetr_dat[index,2+1,1]-tetr_dat[index,1,1])*(tetr_dat[index,2+1,2]-shared_arr[threadIdx().x,2]) - (tetr_dat[index,2+1,2]-tetr_dat[index,1,2])*(tetr_dat[index,2+1,1]-shared_arr[threadIdx().x,1]))^2)) / sqrt((tetr_dat[index,1,2]-tetr_dat[index,2+1,2])^2+(tetr_dat[index,1,3]-tetr_dat[index,2+1,3])^2+(tetr_dat[index,1,1]-tetr_dat[index,2+1,1])^2)


 

shared_arr[threadIdx().x,4]+=sqrt(((((tetr_dat[index,2+1,2]-tetr_dat[index,2,2])*(tetr_dat[index,2+1,3]-shared_arr[threadIdx().x,3]) - (tetr_dat[index,2+1,3]-tetr_dat[index,2,3])*(tetr_dat[index,2+1,2]-shared_arr[threadIdx().x,2]))^2)+
(((tetr_dat[index,2+1,3]-tetr_dat[index,2,3])*(tetr_dat[index,2+1,1]-shared_arr[threadIdx().x,1]) - (tetr_dat[index,2+1,1]-tetr_dat[index,2,1])*(tetr_dat[index,2+1,3]-shared_arr[threadIdx().x,3]))^2)+
((tetr_dat[index,2+1,1]-tetr_dat[index,2,1])*(tetr_dat[index,2+1,2]-shared_arr[threadIdx().x,2]) - (tetr_dat[index,2+1,2]-tetr_dat[index,2,2])*(tetr_dat[index,2+1,1]-shared_arr[threadIdx().x,1]))^2)) / sqrt((tetr_dat[index,2,2]-tetr_dat[index,2+1,2])^2+(tetr_dat[index,2,3]-tetr_dat[index,2+1,3])^2+(tetr_dat[index,2,1]-tetr_dat[index,2+1,1])^2)


 

shared_arr[threadIdx().x,4]+=sqrt(((((tetr_dat[index,2+1,2]-tetr_dat[index,4,2])*(tetr_dat[index,2+1,3]-shared_arr[threadIdx().x,3]) - (tetr_dat[index,2+1,3]-tetr_dat[index,4,3])*(tetr_dat[index,2+1,2]-shared_arr[threadIdx().x,2]))^2)+
(((tetr_dat[index,2+1,3]-tetr_dat[index,4,3])*(tetr_dat[index,2+1,1]-shared_arr[threadIdx().x,1]) - (tetr_dat[index,2+1,1]-tetr_dat[index,4,1])*(tetr_dat[index,2+1,3]-shared_arr[threadIdx().x,3]))^2)+
((tetr_dat[index,2+1,1]-tetr_dat[index,4,1])*(tetr_dat[index,2+1,2]-shared_arr[threadIdx().x,2]) - (tetr_dat[index,2+1,2]-tetr_dat[index,4,2])*(tetr_dat[index,2+1,1]-shared_arr[threadIdx().x,1]))^2)) / sqrt((tetr_dat[index,4,2]-tetr_dat[index,2+1,2])^2+(tetr_dat[index,4,3]-tetr_dat[index,2+1,3])^2+(tetr_dat[index,4,1]-tetr_dat[index,2+1,1])^2)


 
out_sampled_points[index,(num_base_samp_points+2)+(2-1)*3,2]=(((shared_arr[threadIdx().x,4])/5)^3)      
#performing interpolation result is in var2 and it get data from shared_arr
#saving the result of interpolated value to the out_sampled_points
out_sampled_points[index,(num_base_samp_points+2)+(2-1)*3,1]=(((
    source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))) +
    source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))
    )
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (1 - (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))
     +
     ((source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))

(shared_arr,source_arr)
# #saving sample points coordinates
out_sampled_points[index,(num_base_samp_points+2)+(2-1)*3,3]=shared_arr[threadIdx().x,1]
out_sampled_points[index,(num_base_samp_points+2)+(2-1)*3,4]=shared_arr[threadIdx().x,2]
out_sampled_points[index,(num_base_samp_points+2)+(2-1)*3,5]=shared_arr[threadIdx().x,3]

 
shared_arr[threadIdx().x,1]=((tetr_dat[index,3+1,1]-out_sampled_points[index,num_base_samp_points,3])/(2+1))
shared_arr[threadIdx().x,2]=((tetr_dat[index,3+1,2]-out_sampled_points[index,num_base_samp_points,4])/(2+1))
shared_arr[threadIdx().x,3]=((tetr_dat[index,3+1,3]-out_sampled_points[index,num_base_samp_points,5])/(2+1))

#### calculate weight of the point 
#first we get distance to the previous and next point on the line between the last main sample point and the triangle corner
shared_arr[threadIdx().x,4]=sqrt( shared_arr[threadIdx().x,1]^2+shared_arr[threadIdx().x,2]^2+shared_arr[threadIdx().x,3]^2)*2
#now we get the location of sample point
shared_arr[threadIdx().x,1]= out_sampled_points[index,num_base_samp_points,3]+(shared_arr[threadIdx().x,1]*(2))
shared_arr[threadIdx().x,2]= out_sampled_points[index,num_base_samp_points,4]+(shared_arr[threadIdx().x,2]*(2))
shared_arr[threadIdx().x,3]= out_sampled_points[index,num_base_samp_points,5]+(shared_arr[threadIdx().x,3]*(2))

 

shared_arr[threadIdx().x,4]+=sqrt(((((tetr_dat[index,3+1,2]-tetr_dat[index,1,2])*(tetr_dat[index,3+1,3]-shared_arr[threadIdx().x,3]) - (tetr_dat[index,3+1,3]-tetr_dat[index,1,3])*(tetr_dat[index,3+1,2]-shared_arr[threadIdx().x,2]))^2)+
(((tetr_dat[index,3+1,3]-tetr_dat[index,1,3])*(tetr_dat[index,3+1,1]-shared_arr[threadIdx().x,1]) - (tetr_dat[index,3+1,1]-tetr_dat[index,1,1])*(tetr_dat[index,3+1,3]-shared_arr[threadIdx().x,3]))^2)+
((tetr_dat[index,3+1,1]-tetr_dat[index,1,1])*(tetr_dat[index,3+1,2]-shared_arr[threadIdx().x,2]) - (tetr_dat[index,3+1,2]-tetr_dat[index,1,2])*(tetr_dat[index,3+1,1]-shared_arr[threadIdx().x,1]))^2)) / sqrt((tetr_dat[index,1,2]-tetr_dat[index,3+1,2])^2+(tetr_dat[index,1,3]-tetr_dat[index,3+1,3])^2+(tetr_dat[index,1,1]-tetr_dat[index,3+1,1])^2)


 

shared_arr[threadIdx().x,4]+=sqrt(((((tetr_dat[index,3+1,2]-tetr_dat[index,2,2])*(tetr_dat[index,3+1,3]-shared_arr[threadIdx().x,3]) - (tetr_dat[index,3+1,3]-tetr_dat[index,2,3])*(tetr_dat[index,3+1,2]-shared_arr[threadIdx().x,2]))^2)+
(((tetr_dat[index,3+1,3]-tetr_dat[index,2,3])*(tetr_dat[index,3+1,1]-shared_arr[threadIdx().x,1]) - (tetr_dat[index,3+1,1]-tetr_dat[index,2,1])*(tetr_dat[index,3+1,3]-shared_arr[threadIdx().x,3]))^2)+
((tetr_dat[index,3+1,1]-tetr_dat[index,2,1])*(tetr_dat[index,3+1,2]-shared_arr[threadIdx().x,2]) - (tetr_dat[index,3+1,2]-tetr_dat[index,2,2])*(tetr_dat[index,3+1,1]-shared_arr[threadIdx().x,1]))^2)) / sqrt((tetr_dat[index,2,2]-tetr_dat[index,3+1,2])^2+(tetr_dat[index,2,3]-tetr_dat[index,3+1,3])^2+(tetr_dat[index,2,1]-tetr_dat[index,3+1,1])^2)


 

shared_arr[threadIdx().x,4]+=sqrt(((((tetr_dat[index,3+1,2]-tetr_dat[index,3,2])*(tetr_dat[index,3+1,3]-shared_arr[threadIdx().x,3]) - (tetr_dat[index,3+1,3]-tetr_dat[index,3,3])*(tetr_dat[index,3+1,2]-shared_arr[threadIdx().x,2]))^2)+
(((tetr_dat[index,3+1,3]-tetr_dat[index,3,3])*(tetr_dat[index,3+1,1]-shared_arr[threadIdx().x,1]) - (tetr_dat[index,3+1,1]-tetr_dat[index,3,1])*(tetr_dat[index,3+1,3]-shared_arr[threadIdx().x,3]))^2)+
((tetr_dat[index,3+1,1]-tetr_dat[index,3,1])*(tetr_dat[index,3+1,2]-shared_arr[threadIdx().x,2]) - (tetr_dat[index,3+1,2]-tetr_dat[index,3,2])*(tetr_dat[index,3+1,1]-shared_arr[threadIdx().x,1]))^2)) / sqrt((tetr_dat[index,3,2]-tetr_dat[index,3+1,2])^2+(tetr_dat[index,3,3]-tetr_dat[index,3+1,3])^2+(tetr_dat[index,3,1]-tetr_dat[index,3+1,1])^2)


 
out_sampled_points[index,(num_base_samp_points+3)+(2-1)*3,2]=(((shared_arr[threadIdx().x,4])/5)^3)      
#performing interpolation result is in var2 and it get data from shared_arr
#saving the result of interpolated value to the out_sampled_points
out_sampled_points[index,(num_base_samp_points+3)+(2-1)*3,1]=(((
    source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))) +
    source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1])))
    )
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(floor( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (1 - (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))
     +
     ((source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(floor( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (1 - (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2])))) +
      (source_arr[Int(floor( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (1 - (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
       +
       source_arr[Int(ceil( shared_arr[threadIdx().x,1])), Int(ceil( shared_arr[threadIdx().x,2])), Int(ceil( shared_arr[threadIdx().x,3]))] * (shared_arr[threadIdx().x,1] - Int(floor( shared_arr[threadIdx().x,1]))))
      *
      (shared_arr[threadIdx().x,2] - Int(floor( shared_arr[threadIdx().x,2]))))
     *
     (shared_arr[threadIdx().x,3] - Int(floor( shared_arr[threadIdx().x,3]))))

(shared_arr,source_arr)
# #saving sample points coordinates
out_sampled_points[index,(num_base_samp_points+3)+(2-1)*3,3]=shared_arr[threadIdx().x,1]
out_sampled_points[index,(num_base_samp_points+3)+(2-1)*3,4]=shared_arr[threadIdx().x,2]
out_sampled_points[index,(num_base_samp_points+3)+(2-1)*3,5]=shared_arr[threadIdx().x,3]

